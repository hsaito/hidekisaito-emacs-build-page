# -*- coding: utf-8-unix -*-
#+TITLE:     How to Build Emacs on Various Platforms
#+AUTHOR:    Hideki Saito
#+EMAIL:     hidekis@gmail.com
#+DESCRIPTION: Explaining how to build Emacs on various platforms
#+KEYWORDS: Emacs, software, OSS, compile, build 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+HTML_HEAD: <script type="text/javascript">
#+HTML_HEAD:   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
#+HTML_HEAD:   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
#+HTML_HEAD:   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
#+HTML_HEAD:   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
#+HTML_HEAD: 
#+HTML_HEAD:   ga('create', 'UA-114515-36', 'hclippr.org');
#+HTML_HEAD:   ga('send', 'pageview');
#+HTML_HEAD: 
#+HTML_HEAD: </script>
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP: index.html
#+HTML_LINK_HOME: index.html
#+XSLT:

* Why compile your own binary?
There are good reason to compile your own binary, in general...
- You can ensure what you are getting is what comes out from the source code.
- You can have your own customizations. For instance, if you are managing software for your work, you may include your work specific modifications to the source code.
- Relatively safer way of protecting you from possible contamination of malware. Although, to ensure this, you will probably have to build toolchains as well. Because if your tools used to compile your own binary is contaminated, it is possible that your resulting binary can be bogus.
* Instructions for each platform
** Windows
*** Getting files
**** Source
Get the tarball from [[http://www.gnu.org/software/emacs/][GNU Emacs]] page.
**** Build Tools
You will need some build tools. [[http://www.mingw.org/][MinGW]] provides tools you need in order to compile Emacs. Specifically, you need *make* and *gcc* tools from MinGW.

The *makeinfo* tool from [[http://gnuwin32.sourceforge.net/packages/texinfo.htm][TexInfo]] is also required.[fn::I found that the latest version of TexInfo crashes while processing Emacs files -- you may want [[http://sourceforge.net/projects/gnuwin32/files/texinfo/4.8/][4.8]] instead.]

The [[http://gnuwin32.sourceforge.net/packages/coreutils.htm][CoreUtils]] provides many of required tools, so install it, too.

**** Dependencies
In addition, you may want to install the following dependencies. Using setup application is far easier way of handling this.
- [[http://gnuwin32.sourceforge.net/packages/libpng.htm][LibPng]]
- [[http://gnuwin32.sourceforge.net/packages/jpeg.htm][Jpeg]]
- [[http://gnuwin32.sourceforge.net/packages/giflib.htm][GIfLib]]
- [[http://gnuwin32.sourceforge.net/packages/tiff.htm][Tiff]]
- [[http://www.zlatkovic.com/libxml.en.html][LibXml]]
- [[http://www.gnutls.org/][GnuTLS]]
- [[http://gnuwin32.sourceforge.net/packages/xpm.htm][XPM]]

*** Compile Procedures
First, go to /nt/ directory within the uncompressed Emacs source file.

Before proceeding, temporarily turn off your malware scanners. Yes, I meant it. Some of stricter malware scanners cause false alarm while building Emacs and can cause the build process to fail. 

Issue the following command where /path-to-dependency-includes/ being place of your includes (*.h) files. 
#+BEGIN_QUOTE
=configure.bat --with-gcc --cflags -I /path-to-dependency-includes/=
#+END_QUOTE

The following command will make the build


#+BEGIN_QUOTE
=make=
#+END_QUOTE

If you choose to do so, you can also compile your own set of compiled Emacs Lisp file. (this step is necessary if you are compiling from version control source -- it is optional if you are using tarball from the official release.) This process will take fairly long time to complete.

#+BEGIN_QUOTE
=make bootstrap=
#+END_QUOTE


The following command will then make distribution file.[fn::You will need /7z.exe/ in the path to this to work.] I found it easier to just make dist file first then issuing /make install/ -- this way, you can install your Emacs distribution to any places of your choice.


#+BEGIN_QUOTE
=make dist=
#+END_QUOTE 

*** Other Information
- [[http://ourcomments.org/Emacs/w32-build-emacs.html][Building Emacs on MS Windows]], although based on the older Emacs distributions, many of parts are still pertinent.
- The /INSTALL/ file within /nt/ directory inside Emacs source titled /Building and Installing Emacs on Windows (from 95 to 7 and beyond)/ explains details about building process.

** Linux
Compiling Emacs on Linux is straightforward. Make sure you have gcc and other utilities installed, and then you can issue ./configure, make (or make bootstrap) and then make install.

** Mac
Compiling on Mac is fairly easy. You will need to make sure that development tools (gcc, etc.) are downloaded from Apple's site to begin.

As Mac OS X is an UNIX system, it is actually possible to compile manner similar to Linux; that is as console and with X11 lib. The binary I am distributing on this site is packaged .app file, and it can be compiled right out from the box as well.

Similar to Linux, except when you configure, pass with-ns argument, thus:

#+BEGIN_QUOTE
=./configure --with-ns=
#+END_QUOTE

Then as with Linux, you can make (or make bootstrap) the build.

After it is done compiling, you need to make install it.

#+BEGIN_QUOTE
=make install=
#+END_QUOTE

This command will not "install" the build in a sense performed when you do the same on Linux. It creates Emacs.app in /nextstep/ directory.

Then you can move this file to /Application/ directory or other favorite directory of your choice and run just like any other Mac applications.

Instructions of how to make Mac version of Emacs can be found in /INSTALL/ file within nextstep directory.
